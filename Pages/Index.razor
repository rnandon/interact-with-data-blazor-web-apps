@page "/"

@using BlazingPizza.Services

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState

<div class="top-bar">
    <a href="" class="logo">
        <img src="img/logo.svg" alt="main logo">
    </a>

    <a href="checkout" class="nav-tab">
        <img src="img/pizza-slice.svg" alt="Get pizza">
        <div>Get Pizza</div>
    </a>
</div>

<div class="main">
    <h1>Blazing Pizzas</h1>
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                            @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@if (OrderState.ShowingConfigureDialog) {
    <ConfigurePizzaDialog 
        Pizza="OrderState.ConfiguringPizza" 
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog"/>
}

<div class="sidebar">
    @if (order.Pizzas.Any()) 
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var pizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title" @onclick="@(() => OrderState.ShowEditPizzaDialog(pizza))">@pizza.Size @pizza.Special.Name</div>
                    <div class="item-price">
                        @pizza.GetFormattedTotalPrice()
                    </div>
                    <a @onclick="@(() => OrderState.RemoveConfiguredPizza(pizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
    List<PizzaSpecial> specials = new();
    Order order => OrderState.Order;
    
    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }
}

