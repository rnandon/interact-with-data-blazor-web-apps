@page "/checkout"

@implements IDisposable

@using BlazingPizza.Services

@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrderAsync OnInvalidSubmit=ShowError>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review Order</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (IsError)
                {
                    <div class="alert alert-danger">Please eneter a name and address.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="Submit" disabled=@IsError>
            Place Order
        </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    private EditContext editContext;
    bool IsError = false;

    protected override void OnInitialized()
    {
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    public void Dispose() 
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e) 
    {
        IsError = !editContext.Validate();
        StateHasChanged();
    }

    private void ShowError() 
    {
        IsError = true;
    }

    public async Task PlaceOrderAsync() 
    {
        IsError = false;
        OrderState.Order.DeliveryAddress.Id = 1;
        OrderState.Order.CreatedTime = DateTime.UtcNow;
        OrderState.Order.UserId = "Tester";
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"/myorders/{newOrderId}");
    }
}

